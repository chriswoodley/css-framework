@import 'reset';
@import 'variables';
@import 'functions';
@import 'mixins';
@import 'structure';

* {
  box-sizing: border-box;

  &::before,
  &::after {
    box-sizing: border-box;
  }
}

html,
body {
  height: 100%;
}

html {
  font-family: $font-family;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @include interpolate(
    font-size,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-font-size, min),
    map-get($base-font-size, max)
  );
}

body {
  @include interpolate(
    line-height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );
  @include baseline();
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: $normal-font-weight;
}

h1 {
  @include heading($h1, 2, 1);

  letter-spacing: -0.1rem;
}

h2 {
  @include heading($h2, 3, 1);

  letter-spacing: -0.05rem;
}

h3 {
  @include heading($h3, 2.8, 1.2);

  letter-spacing: -0.025rem;
}

h4 {
  @include heading($h4, 2.2 , 0.8);

  letter-spacing: -0.0125rem;
}

h5 {
  @include heading($h5, 2, 1);
}

h6 {
  @include heading($h6, 2, 1);
}

// Text Content

p,
dl,
ul,
ol,
pre,
figure,
figcaption,
blockquote,
hr {
  @include interpolate(
    margin-bottom,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );
}

p,
dl,
ul,
ol,
pre,
figure,
figcaption,
blockquote {
  margin-top: 0;
}

blockquote {
  @include interpolate(
    margin-left margin-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );
}

dt {
  font-weight: $bold-font-weight;
}

dd {
  @include interpolate(
    margin-left,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );
}

figure {
  @include interpolate(
    margin-left margin-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );

  & > :last-child {
    margin-bottom: 0;
  }
}

pre,
img + figcaption,
p + figcaption {
  @extend small;
}

hr {
  border-top: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: inherit;
}

ul,
ol {
  @include interpolate(
    padding-left,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    2
  );
}

li > ul,
li > ol {
  @include interpolate(
    padding-left,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );

  margin-bottom: 0;
}

// inline text semantics
a {
  &:hover,
  &:focus {
    text-decoration: none;
  }
}

abbr {
  font-variant: all-small-caps;

  &[title] {
    cursor: help;
  }
}

code,
kbd,
samp,
var {
  padding: 0.09rem 0.1rem 0;

  @extend small;

  line-height: 1;
}

b,
strong,
time,
var {
  font-weight: $bold-font-weight;
}

kbd {
  @extend %solid-1px-border;
}

mark {
  padding: 0.05rem;

  // Accessibility, for screen readers…
  &::before,
  &::after {
    @extend %visually-hidden;
  }

  &::before {
    content: " [highlight start] ";
  }

  &::after {
    content: " [highlight end] ";
  }
}

q {
  quotes: "\201C" "\201D" "\2018" "\2019";

  &::before {
    content: open-quote;
  }

  &::after {
    content: close-quote;
  }
}

s {
  // Accessibility, for screen readers…

  &::before,
  &::after {
    @extend %visually-hidden;
  }

  &::before {
    content: " [start of stricken text] ";
  }

  &::after {
    content: " [end of stricken text] ";
  }
}

small {
  @include interpolate(
    font-size,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($small-font-size, min),
    map-get($small-font-size, max)
  );
}

u {
  text-decoration-color: inherit;
  text-decoration-style: wavy;
  text-decoration-line: underline;
}

var {
  font-family: monospace;
}

// Image and Multimedia
audio,
video,
img,
picture {
  display: block;
  vertical-align: middle;
}

img {
  height: auto;
  max-width: 100%;
  border: none;
}

// Embedded Content
embed,
iframe,
object {
  display: block;
  vertical-align: middle;
}

iframe {
  border: none;
}

picture {
  max-width: 100%;
  height: auto;
}

// Table content
table {
  table-layout: fixed;
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;

  @include interpolate(
    margin-bottom,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
}

th {
  vertical-align: bottom;
}

td {
  vertical-align: top;
}

th,
td {
  @extend %solid-1px-border;

  @include interpolate(
    padding-left padding-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
  @include interpolate(
    padding-top padding-bottom,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    0.5
  );

  text-align: left;
}

caption {
  caption-side: bottom;
  text-align: left;
  font-style: italic;

  @extend small;
}

// Forms
button {
  display: inline-block;
  margin: 0;
  padding-top: 0;
  padding-bottom: 0;

  @extend %solid-1px-border;

  @include interpolate(
    padding-left padding-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    2
  );

  font-size: inherit;
  color: inherit;
  appearance: none;
  cursor: pointer;
}

label {
  display: block;
  font-weight: $bold-font-weight;
}

input {
  display: block;
  width: 100%;
  margin: 0;
  padding-top: 0;
  padding-bottom: 0;

  @extend %solid-1px-border;

  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;

  @include interpolate(
    padding-left padding-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    2
  );

  label > & {
    display: inline-block;
    width: auto;
  }
}

[type="radio"],
[type="checkbox"] {
  display: inline-block;
  width: auto;
  vertical-align: middle;
  border: none;
  height: auto;
  padding: 0;

  & + label {
    display: inline-block;
  }
}

[type="color"] {
  display: inline-block;
  vertical-align: middle;
  padding: 0;
  background: transparent;
  border: none;

  &::-webkit-color-swatch-wrapper {
    padding: 0;
  }

  &::-webkit-color-swatch {
    border: none;
  }

  &::-moz-color-swatch {
    border: none;
  }

  & + label {
    display: inline-block;
  }

  @include interpolate(
    height width,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    2
  );
}

[type="file"] {
  width: auto;
  max-width: 100%;
  border: none;
  padding: 0;
  height: auto;
}

[type="range"] {
  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max)
  );

  padding: 0;
  border: none;
  appearance: none;
  background: transparent;



  /*
    range inputs are weird across browsers. can't combine selectors like

    &::-webkit-slider-thumb,
    &::-moz-range-thumb {}

    so we can't use scss placeholders
    instead we use mixins and separate rules
  */

  /* stylelint-disable-next-line no-descending-specificity */
  &::-webkit-slider-thumb {
    @include range-input-thumb();
  }

  // /* stylelint-disable-next-line no-descending-specificity */
  &::-webkit-slider-runnable-track {
    @include range-input-track();
  }

  // /* stylelint-disable-next-line no-descending-specificity */
  &::-moz-range-thumb {
    @include range-input-thumb();
  }

  // /* stylelint-disable-next-line no-descending-specificity */
  &::-moz-range-track {
    @include range-input-track();
  }

  // /* stylelint-disable-next-line no-descending-specificity */
  &::-moz-range-progress {
    @include interpolate(
      height,
      map-get($breakpoints, sm),
      map-get($breakpoints, xlg),
      map-get($base-line-height, min),
      map-get($base-line-height, max),
      0.25
    );

    appearance: none;
    background-color: #000;
  }
}

[type="reset"],
[type="submit"] {
  display: inline-block;
  width: auto;
}

fieldset {
  margin: 0;

  @extend %solid-1px-border;

  @include interpolate(
    padding,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
  @include interpolate(
    margin-bottom,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );
}

legend {
  display: block;
  font-weight: $bold-font-weight;
}

form {
  display: block;

  @include interpolate(
    margin-bottom,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );

  & > :last-child {
    margin-bottom: 0;
  }
}

select {
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-color: inherit;
  border-radius: $border-radius;

  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    1
  );

  background-color: #fff;

  @extend small;

  &[multiple] {
    height: auto;
  }
}

textarea {
  width: 100%;
  resize: vertical;

  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    4
  );
  @include interpolate(
    padding,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    0.5
  );

  &[rows] {
    height: auto;
  }

  &[cols] {
    resize: both;
    width: auto;
  }
}

// Interactive Elements

summary {
  @include interpolate(
    height,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    2
  );
  @include interpolate(
    padding,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    0.5
  );
  @include interpolate(
    margin-left margin-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    -0.5
  );
}

details {
  @extend %solid-1px-border;

  @include interpolate(
    padding-left padding-right,
    map-get($breakpoints, sm),
    map-get($breakpoints, xlg),
    map-get($base-line-height, min),
    map-get($base-line-height, max),
    0.5
  );

  &[open] {
    @include interpolate(
      padding-bottom,
      map-get($breakpoints, sm),
      map-get($breakpoints, xlg),
      map-get($base-line-height, min),
      map-get($base-line-height, max),
      0.5
    );

    & > summary {
      border-bottom-width: 1px;
      border-bottom-style: solid;
      border-bottom-color: initial;

      @include interpolate(
        margin-bottom,
        map-get($breakpoints, sm),
        map-get($breakpoints, xlg),
        map-get($base-line-height, min),
        map-get($base-line-height, max),
        0.5
      );
    }
  }

  & + details {
    border-top: none;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}
